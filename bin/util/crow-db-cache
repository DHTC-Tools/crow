#!/usr/bin/env python

import os
import sys
import json
import time
import requests
from concurrent import futures

try:
	import setproctitle
except ImportError:
	setproctitle = None

baseurl = 'http://db.mwt2.org:8081'
maxthreads = 1

def combine(d):
	keys = d.keys()
	if len(keys) == 1:
		for item in d[keys[0]]:
			yield {keys[0]: item}
		return

	dreduce = dict(d)
	del dreduce[keys[0]]
	for item in d[keys[0]]:
		r = {keys[0]: item}
		for m in combine(dreduce):
			r.update(m)
			yield r


def request(method, params):
	data = {
		'hours': 168,
		'task': 'all',
		'end': 'default',
		'start': 'default',
		'project': 'all',
		'user': 'all',
		'rel': 'running',
		'groupby': 'Owner',
		'pool': 'default',
		'binwidth': '7200',
	}

	headers = {
		'X-Crow-RCache': 'no',
		'Accept': 'application/json',
		'Content-Type': 'application/json',
	}

	data.update(params)
	url = baseurl + '/' + method.lstrip('/')
	req = requests.post(url, headers=headers, data=json.dumps(data))
	return req.text

def work(combination, basetitle=''):
	if setproctitle and basetitle:
		name = ' '.join(['%s:%s' % (k, combination[k]) for k in sorted(combination.keys())])
		setproctitle.setproctitle(basetitle + ' [' + name + ']')
	s = time.time()
	result = request('/starts', combination)
	return combination, time.time() - s


def main(args):
	# Arguments are the specific sets of hours to process in this run.
	hours = [int(h) for h in args]
	if not hours:
		hours = [1, 2, 4, 8, 16, 24, 48, 72, 168]

	combinations = {
		'bins': (42, 84),
		'hours': hours,
		'groupby': 'Owner ProjectName'.split(),
		'pool': 'osg atlas duke cms umich uchicago'.split(),
		'rel': 'running idle held inqueue submitted started finished'.split(),
	}

	if setproctitle:
		curtitle = setproctitle.getproctitle()

	ex = futures.ProcessPoolExecutor(max_workers=maxthreads)

	all = []
	for combination in combine(combinations):
		combination = dict(combination)
		combination['binwidth'] = combination['hours'] * 60 * 60 / combination['bins']
		del combination['bins']
		all.append(ex.submit(work, combination, basetitle=curtitle))
	for future in futures.as_completed(all):
		c, t = future.result()
		print c, t


if __name__ == '__main__':
	sys.exit(main(sys.argv[1:]))

